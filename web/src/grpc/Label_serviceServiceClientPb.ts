/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: label_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as label_service_pb from './label_service_pb'; // proto import: "label_service.proto"


export class LabelServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSearchLabels = new grpcWeb.MethodDescriptor(
    '/api.LabelService/SearchLabels',
    grpcWeb.MethodType.SERVER_STREAMING,
    label_service_pb.SearchRequest,
    label_service_pb.MetaLabelResponse,
    (request: label_service_pb.SearchRequest) => {
      return request.serializeBinary();
    },
    label_service_pb.MetaLabelResponse.deserializeBinary
  );

  searchLabels(
    request: label_service_pb.SearchRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<label_service_pb.MetaLabelResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/api.LabelService/SearchLabels',
      request,
      metadata || {},
      this.methodDescriptorSearchLabels);
  }

}

